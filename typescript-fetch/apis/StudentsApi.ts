/* tslint:disable */
/* eslint-disable */
/**
 * Online School
 * Online School Application is where students and teachers meet together
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Student,
    StudentFromJSON,
    StudentToJSON,
    StudentBase,
    StudentBaseFromJSON,
    StudentBaseToJSON,
} from '../models';

export interface CreateStudentRequest {
    studentBase: StudentBase;
}

/**
 * 
 */
export class StudentsApi extends runtime.BaseAPI {

    /**
     * Create new student
     */
    async createStudentRaw(requestParameters: CreateStudentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters.studentBase === null || requestParameters.studentBase === undefined) {
            throw new runtime.RequiredError('studentBase','Required parameter requestParameters.studentBase was null or undefined when calling createStudent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/students`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentBaseToJSON(requestParameters.studentBase),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     * Create new student
     */
    async createStudent(requestParameters: CreateStudentRequest, initOverrides?: RequestInit): Promise<Student> {
        const response = await this.createStudentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * retrieve all students
     */
    async getStudentsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Student>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/students`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StudentFromJSON));
    }

    /**
     * retrieve all students
     */
    async getStudents(initOverrides?: RequestInit): Promise<Array<Student>> {
        const response = await this.getStudentsRaw(initOverrides);
        return await response.value();
    }

}
